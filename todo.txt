Version:	x.y.z = (quasi alles umgeschrieben, große Änderung, kleine Änderung oder Bugfix)
Priorität:	n:, n = Prioritätsnummer

------------------------------------------------------------------------------------------------
X	1: "Musterloesung" mit annotiertem Quellcode, z.B. ueber JavaScript einblendbar
X	1: Nach jeder Funktion printf der Variablen (ggf. Output)
		X	Vor dem Ende der main-Funktion
		X	In einem einzelnen printf
		X	Vor dem Ende jeder Funktion
X	1: >=1 für Pointer
X	1: Multiple references, maximal x (settings.json -> POINTER_DEPTH_MAX)
X	1: >=1 für Datentypen
X	1: >=1 für Funktionen
X	1: Funktionen sollen by value/by reference berücksichtigen
X	1: Funktionsswitch "nur Void"
X	1: Funktionswerte zurückgegeben und einer beliebigen Variable zuweisen (siehe setReturn in function.py)
X	1: Hints für Assignments (z.B. Funktionsaufruf und return)
X	1: Texte auf Deutsch übersetzen
X	1: Bug: Sprache nach Generierung aus GET verschwunden
X	1: Konditionale Sprünge

	IdentifierList
		__init__
			# set stuff
			namespace -> set(...)
			ids -> []


		__iter__()
		    return iter(self._operations)

		__contains__(id)
			return id in self.____

		append(BasicIdentifier id)
			if id in namespace: exception
			add id to namespace
			return ids.append(list)

		extend(IdentifierList list)
			for item in list:
				if id in namespace: exception
				add id to namespace
			return ids.extend(list)

		remove(BasicIdentifier id)
			remove id from namespace
			return ids.remove(id)

		filter(filters)
			apply filters on all ids
			return filtered

		sample(range_, filters=None)
			if filters is None: all ids
			else: apply filters on all ids
			return random.sample(ids)

		choice(filters=None)
			if filters is None: all ids
			else: apply filters on all ids
			return random.choice(ids)

	BasicIdentifier
		enum As

		__init__
			# Set stuff
			parent -> None
			name -> None
			namespace -> namespace | None

			# Additional stuff
			if parent: parent -> ...
			else if name: name -> ...

		set_parent(parent)
			set
		parent = property(...)

		set_name(name=None)
			if name is not ascii: Exception
			remove previous name from namespace
			add name to namespace
		name = property(...)

		set_reference(reference=None)
			use implemented version
		reference = property(...)

		reference_depth(count=0)
			use implemented version
		origin = property(...)
			use implemented version
		is_pointer = property(...)
			use implemented version


	Any*(BasicIdentifier)
		has stuff in c.json
		__repr__
			'type [name] = (&[reference] | value)'
		hint
			use implemented version
		copy_as_value(namespace, name=None)
			make copy of self
		copy_as_reference(namespace, name=None)
			make new identifier with reference of self
		dereference = property(...)
			yeah, have fun!
		dereference_asterisks = property(...)
			helper for dereference property
			think about NOT adding this because it's ugly!
		type_str = property(...)
			data type as a string including derefencing asterisks


	Primitive(BasicIdentifier)
		__init__
			super

			# Set stuff
			value -> None
			reference -> None

			# Additional stuff
			parent -> parent | None
			if not value and not reference: random()
			else:
				value -> value | reference -> reference

		_code()

		code = property(...)

		random()
			random value
				use implemented (see __init__)

		value(value)
			use implemented
		value = property(...)


	Array(BasicIdentifier)
		Note: For the moment we will not allow referencing an array while it is actually possible



	Get rid of call_by in function
		Instead just do what you want?!
	Get rid of type_list in any generator and identifier
		Don't replace, we don't care anymore
	Get rid of from_ of identifier instances
		I have absolutely no idea what this is doing
	Replace pass_to_function by copy
	Update isinstance(..., Identifier) and stuff

	1: Arrays:
		Dropdown-Menue
		--> eindimensionale Arrays
		--> zweidimensionale Arrays
		'''
		int ar[][] = {{1,2,3},
					  {3,4,5},
					  {6,7,8}};
		for (i = 0; i < 3; i++) {
			for(j = 0; j < 3; j++) {
				ar[i][j] = ar[i][j] + j;
			}
		}
		printf("%d", ar[1][2]);
		'''
		=> tag + .1

	2: Konditionale Sprünge, Verbesserungen
		Levels einbauen
			1. ==, <, >, <=, >=
			2. %
			3. Sämtliche andere Operationen
		=> tag + ..1
	2: settings, language, ifilter, language zu statischen Variablen/Klassen, die nur einmal initiert und nicht ständig übergeben werden müssen
		Language-Klasse in Hint-Funktion nutzen
			Dirty, dirty, dirty!
		=> tag + ..1
	2: Einrückungen sind eklig eingebaut, da muss was schöneres her
		Code zu Klasse machen und indentations automatisch setzen?
		=> tag + ..1
	2: Kurzschreibweisen für c = a + b, wenn .assign == .left
		Manuell (de)aktivierbar
	2: Weitere Operationen einbauen
		UnaryOperation (++, --, !, ~, + (als Präfix), - (als Präfix))
		BinaryOperation (+, -, *, /, %, &, |, ^, >>, <<), shorthand: (+=, -=, *=, /=, %=, &=, |=, ^=, >>=, <<=)
X	2: Operationen mit festen Werten, zufällig und wenn keine passenden Identifier übrig sind
.	2: Operationsresultat zu Operationen hinzufügen als Alternative zu Identifiern
		Implementiert, aber ungetestet
	2: Kommentare durchnummerieren
	2: Bitoperationen Level 3, ^, % in Level 4 reinschieben
		Was war der Grund hierfür nochmal?
X	2: Bitrepräsentation bei BitWise Operationen
	2: Speicher Exceptions in das Logfile


	3: Error logging erweitern
		=> tag + .1
	3: Einstellungen dokumentieren
	3: Funktionsnamen in Namespace von BasicGenerator einsetzen, sodass der Funktionsname nicht bei fehlerhaftem Code verloren geht
		=> tag + ..1
	3: Aus generiertem Code einen Lückentext bauen
		=> tag + .1
	3: GeneratorChild/BasicGenerator überarbeiten, sodass bei Initialize nicht jeweils alles doppelt steht
		=> tag + .1
	3: Properties/Funktionen-Konvention überarbeiten
		Property, wenn Getter und Setter vorhanden
		Funktion, wenn nur Getter (isSomething)
	3: Fine tuning mittels erweiterten Optionen im CGI plugin
		=> tag + .1

	?: Anzahl an Operationen, die 0 als Ergebnis zuweisen, auf x Variablen reduzieren
		=> tag + .1
	?: Filter durch list comprehensions ersetzen
		=> tag + ..1
	?: Slot-System-Klasse schreiben und entsprechende Codezeilen ersetzen
		=> tag + ..1
	?: RandomCodeGenerator.addFunction() mit Slot-System ersetzen (by reference)
		=> tag + ..1
